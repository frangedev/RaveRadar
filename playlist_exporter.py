#!/usr/bin/env python3
import os
import json
import logging
from typing import List, Dict, Optional
from pathlib import Path

import spotipy
from spotipy.oauth2 import SpotifyOAuth
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

logger = logging.getLogger(__name__)

class PlaylistExporter:
    def __init__(self, config_path: str = "config.yaml"):
        """Initialize playlist exporter with configuration."""
        self.config = self._load_config(config_path)
        self.spotify_client = self._init_spotify()
        self.youtube_client = self._init_youtube()
        
    def _load_config(self, config_path: str) -> Dict:
        """Load configuration from YAML file."""
        try:
            with open(config_path, 'r') as f:
                return yaml.safe_load(f)
        except Exception as e:
            logger.error(f"Failed to load config: {e}")
            sys.exit(1)

    def _init_spotify(self) -> Optional[spotipy.Spotify]:
        """Initialize Spotify client."""
        try:
            return spotipy.Spotify(auth_manager=SpotifyOAuth(
                client_id=self.config['spotify']['client_id'],
                client_secret=self.config['spotify']['client_secret'],
                redirect_uri=self.config['spotify']['redirect_uri'],
                scope='playlist-modify-public'
            ))
        except Exception as e:
            logger.warning(f"Failed to initialize Spotify client: {e}")
            return None

    def _init_youtube(self) -> Optional[any]:
        """Initialize YouTube Music client."""
        try:
            creds = None
            token_path = 'youtube_token.json'
            
            if os.path.exists(token_path):
                creds = Credentials.from_authorized_user_file(token_path)
            
            if not creds or not creds.valid:
                if creds and creds.expired and creds.refresh_token:
                    creds.refresh(Request())
                else:
                    flow = InstalledAppFlow.from_client_secrets_file(
                        'youtube_credentials.json',
                        ['https://www.googleapis.com/auth/youtube.force-ssl']
                    )
                    creds = flow.run_local_server(port=0)
                
                with open(token_path, 'w') as token:
                    token.write(creds.to_json())
            
            return build('youtube', 'v3', credentials=creds)
        except Exception as e:
            logger.warning(f"Failed to initialize YouTube client: {e}")
            return None

    def _search_spotify_track(self, track: Dict) -> Optional[str]:
        """Search for a track on Spotify and return its URI."""
        if not self.spotify_client:
            return None
            
        query = f"artist:{track['artist']} track:{track['title']}"
        results = self.spotify_client.search(q=query, type='track', limit=1)
        
        if results['tracks']['items']:
            return results['tracks']['items'][0]['uri']
        return None

    def _search_youtube_track(self, track: Dict) -> Optional[str]:
        """Search for a track on YouTube and return its video ID."""
        if not self.youtube_client:
            return None
            
        query = f"{track['artist']} {track['title']}"
        request = self.youtube_client.search().list(
            part="snippet",
            q=query,
            type="video",
            maxResults=1
        )
        response = request.execute()
        
        if response['items']:
            return response['items'][0]['id']['videoId']
        return None

    def export_to_spotify(self, tracks: List[Dict], playlist_name: str) -> Optional[str]:
        """Export tracks to a Spotify playlist."""
        if not self.spotify_client:
            logger.error("Spotify client not initialized")
            return None
            
        try:
            # Create playlist
            user_id = self.spotify_client.current_user()['id']
            playlist = self.spotify_client.user_playlist_create(
                user_id,
                playlist_name,
                public=True,
                description="Generated by RaveRadar"
            )
            
            # Add tracks
            track_uris = []
            for track in tracks:
                uri = self._search_spotify_track(track)
                if uri:
                    track_uris.append(uri)
            
            if track_uris:
                self.spotify_client.playlist_add_items(playlist['id'], track_uris)
            
            return playlist['external_urls']['spotify']
        except Exception as e:
            logger.error(f"Failed to export to Spotify: {e}")
            return None

    def export_to_youtube(self, tracks: List[Dict], playlist_name: str) -> Optional[str]:
        """Export tracks to a YouTube playlist."""
        if not self.youtube_client:
            logger.error("YouTube client not initialized")
            return None
            
        try:
            # Create playlist
            playlist = self.youtube_client.playlists().insert(
                part="snippet,status",
                body={
                    "snippet": {
                        "title": playlist_name,
                        "description": "Generated by RaveRadar"
                    },
                    "status": {
                        "privacyStatus": "public"
                    }
                }
            ).execute()
            
            # Add tracks
            for track in tracks:
                video_id = self._search_youtube_track(track)
                if video_id:
                    self.youtube_client.playlistItems().insert(
                        part="snippet",
                        body={
                            "snippet": {
                                "playlistId": playlist['id'],
                                "resourceId": {
                                    "kind": "youtube#video",
                                    "videoId": video_id
                                }
                            }
                        }
                    ).execute()
            
            return f"https://www.youtube.com/playlist?list={playlist['id']}"
        except Exception as e:
            logger.error(f"Failed to export to YouTube: {e}")
            return None

    def export_playlist(self, tracks: List[Dict], playlist_name: str, platform: str) -> Optional[str]:
        """Export tracks to the specified platform."""
        if platform.lower() == 'spotify':
            return self.export_to_spotify(tracks, playlist_name)
        elif platform.lower() == 'youtube':
            return self.export_to_youtube(tracks, playlist_name)
        else:
            logger.error(f"Unsupported platform: {platform}")
            return None 